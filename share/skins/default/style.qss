/*
 * Toolbar and tool button
 * -----------------------------------------------------------
 */

QToolButton {
  border-width: 0px;
  color: #000000;
  font: 12px;
  padding: 5px 5px;
  border-style: solid;
  border-color: #ececec;
  border-radius: 4px;
  border-bottom-color: #e0e0e0;
}

QToolButton[popupMode="1"] { /* only for MenuButtonPopup */
  padding-right: 10px; /* make way for the popup button */
}
QToolButton::menu-button {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
  padding-right: 4px;
  width: 10px;
}

QToolButton:hover {
  /*background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 white, stop:0.4 white, stop:1 grey);*/
  background-color: rgba(211, 211, 211, 0.5)
}
QToolButton:pressed {
  /*background-color: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 white, stop:0.9 grey, stop:1 grey);*/
  background-color: rgba(211, 211, 211, 1)
}

/*
 * Document browser
 * -----------------------------------------------------------
 */

QWidget#editor-container {
  background-color: white;
}


/*
 * Tab browser
 * -----------------------------------------------------------
 *
 * The frame of the tab widget is styled using the ::pane subcontrol. The left and
 * right corners are styled using the ::left-corner and ::right-corner
 * respectively. The position of the tab bar is controlled using the ::tab-bar
 * subcontrol.
 *
 * By default, the subcontrols have positions of a QTabWidget in the QWindowsStyle.
 * To place the QTabBar in the center, set the subcontrol-position of the tab-bar
 * subcontrol.
 *
 * Individual tabs may be styled using the ::tab subcontrol. Close buttons using
 * the ::close-button The tabs support the :only-one, :first, :last, :middle,
 * :previous--selected, :next-selected, :selected pseudo states.
 *
 * The :top, :left, :right, :bottom pseudo states depending on the orientation of
 * the tabs.
 *
 * Overlapping tabs for the selected state are created by using negative margins
 * or using the absolute position scheme.
 *
 * The tear indicator of the QTabBar is styled using the ::tear subcontrol.
 *
 * QTabBar used two QToolButtons for its scrollers that can be styled using the
 * QTabBar QToolButton selector. To specify the width of the scroll button use the
 * ::scroller subcontrol.
 *
 * The alignment of the tabs within the QTabBar is styled using the alignment
 * property.
 *
 * Warning:
 *
 * To change the position of the QTabBar within a QTabWidget, use the tab-bar
 * subcontrol (and set subcontrol-position).
 *
 */

QWidget#document-panel {
  background-color: #F5F5F5;
}

/* The tab widget frame */
WizMainTabBrowser::pane {
  border-top: 1px solid #DADAD9;
  top: -1px;
}

/* This subcontrol exists only to control the position of the
   QTabBar inside the QTabWidget. */
WizMainTabBrowser::tab-bar {
}

/* Style the tab using the tab sub-control. Note that
   it reads QTabBar _not_ QTabWidget */
WizMainTabBrowser > QTabBar::tab {
  padding: 2px 0px;
  height: 27px;
  min-width: 20ex;
  max-width: 30ex;
}

WizMainTabBrowser > QTabBar::tab:selected,
WizMainTabBrowser > QTabBar::tab:hover {
}

WizMainTabBrowser > QTabBar::tab:selected {
  background: white;
  border-left: 2px solid #448AFF;
  border-right: 1px solid #DADAD9;
}

WizMainTabBrowser > QTabBar::tab:!selected {
  border-left: 0px;
  margin-left: 2px;
  margin-right: 1px;
}


/*
 *
 * -----------------------------------------------------------
 */

QToolTip {
  font: 12px #000000;
  padding: 0px 1px;
  background-color: qlineargradient(
    x1: 0.5, y1: 1, x2: 0.5, y2: 0,
    stop: 0 #DADAD9, stop: 0.5 #F8F8F8
  );
  border: 1px outset #DADAD9;
}

WizDocumentTransitionView > .QWidget {
  background-color:#FFFFFF;
}

WizDocumentTransitionView > QToolButton {
  border: 0px;
  padding: 0px;
  border-radius: 0px;
  background-color: #F5F5F5;
}

WizInfoBar {
  font-size: 12px;
  color: #a2a2a2;
}

WizLoginDialog,
QMainWindow {
  border: 1px solid rgb(165, 165, 165);
}

WizLoginDialog:active,
QMainWindow:active {
  border: 1px solid rgb(68, 138, 255);
}